/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createElection"
      | "electionCount"
      | "elections"
      | "endElection"
      | "getCandidate"
      | "getVoterChoice"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ElectionCreated"
      | "ElectionEnded"
      | "OwnershipTransferred"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createElection",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterChoice",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [electionId: BigNumberish, title: string];
  export type OutputTuple = [electionId: bigint, title: string];
  export interface OutputObject {
    electionId: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionEndedEvent {
  export type InputTuple = [electionId: BigNumberish];
  export type OutputTuple = [electionId: bigint];
  export interface OutputObject {
    electionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    voter: AddressLike,
    candidateId: BigNumberish
  ];
  export type OutputTuple = [
    electionId: bigint,
    voter: string,
    candidateId: bigint
  ];
  export interface OutputObject {
    electionId: bigint;
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createElection: TypedContractMethod<
    [_title: string, _candidateNames: string[]],
    [void],
    "nonpayable"
  >;

  electionCount: TypedContractMethod<[], [bigint], "view">;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        id: bigint;
        title: string;
        isActive: boolean;
        candidateCount: bigint;
      }
    ],
    "view"
  >;

  endElection: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCandidate: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  getVoterChoice: TypedContractMethod<
    [_electionId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [_title: string, _candidateNames: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "electionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint] & {
        id: bigint;
        title: string;
        isActive: boolean;
        candidateCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterChoice"
  ): TypedContractMethod<
    [_electionId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionEnded"
  ): TypedContractEvent<
    ElectionEndedEvent.InputTuple,
    ElectionEndedEvent.OutputTuple,
    ElectionEndedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ElectionCreated(uint256,string)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "ElectionEnded(uint256)": TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;
    ElectionEnded: TypedContractEvent<
      ElectionEndedEvent.InputTuple,
      ElectionEndedEvent.OutputTuple,
      ElectionEndedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
