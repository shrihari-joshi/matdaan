/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SimpleZKPVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addValidVoters"
      | "electionVoterMerkleRoots"
      | "generateNullifier"
      | "owner"
      | "renounceOwnership"
      | "setVoterMerkleRoot"
      | "transferOwnership"
      | "validVoters"
      | "verifyVoteCommitment"
      | "verifyVoter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MerkleRootSet"
      | "OwnershipTransferred"
      | "VoterAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addValidVoters",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "electionVoterMerkleRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateNullifier",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVoterMerkleRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validVoters",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoteCommitment",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoter",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addValidVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionVoterMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoterMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoteCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoter",
    data: BytesLike
  ): Result;
}

export namespace MerkleRootSetEvent {
  export type InputTuple = [electionId: BigNumberish, merkleRoot: BytesLike];
  export type OutputTuple = [electionId: bigint, merkleRoot: string];
  export interface OutputObject {
    electionId: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterAddedEvent {
  export type InputTuple = [electionId: BigNumberish, voterHash: BytesLike];
  export type OutputTuple = [electionId: bigint, voterHash: string];
  export interface OutputObject {
    electionId: bigint;
    voterHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleZKPVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleZKPVerifier;
  waitForDeployment(): Promise<this>;

  interface: SimpleZKPVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addValidVoters: TypedContractMethod<
    [_electionId: BigNumberish, _voterHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  electionVoterMerkleRoots: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  generateNullifier: TypedContractMethod<
    [_voterHash: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVoterMerkleRoot: TypedContractMethod<
    [_electionId: BigNumberish, _merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validVoters: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  verifyVoteCommitment: TypedContractMethod<
    [
      _nullifierHash: BytesLike,
      _candidateId: BigNumberish,
      _secret: BytesLike,
      _commitment: BytesLike
    ],
    [boolean],
    "view"
  >;

  verifyVoter: TypedContractMethod<
    [_electionId: BigNumberish, _voterHash: BytesLike, _proof: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addValidVoters"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _voterHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "electionVoterMerkleRoots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "generateNullifier"
  ): TypedContractMethod<[_voterHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoterMerkleRoot"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validVoters"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyVoteCommitment"
  ): TypedContractMethod<
    [
      _nullifierHash: BytesLike,
      _candidateId: BigNumberish,
      _secret: BytesLike,
      _commitment: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyVoter"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _voterHash: BytesLike, _proof: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "MerkleRootSet"
  ): TypedContractEvent<
    MerkleRootSetEvent.InputTuple,
    MerkleRootSetEvent.OutputTuple,
    MerkleRootSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoterAdded"
  ): TypedContractEvent<
    VoterAddedEvent.InputTuple,
    VoterAddedEvent.OutputTuple,
    VoterAddedEvent.OutputObject
  >;

  filters: {
    "MerkleRootSet(uint256,bytes32)": TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;
    MerkleRootSet: TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoterAdded(uint256,bytes32)": TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;
    VoterAdded: TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;
  };
}
