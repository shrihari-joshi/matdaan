/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ElectionManager,
  ElectionManagerInterface,
} from "../../contracts/ElectionManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "electionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "votingContract",
        type: "address",
      },
    ],
    name: "ElectionRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "electionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "elections",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "address",
        name: "votingContract",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_electionId",
        type: "uint256",
      },
    ],
    name: "getElectionInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "address",
        name: "votingContract",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "address",
        name: "_votingContract",
        type: "address",
      },
    ],
    name: "registerElection",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610813806100a56000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063997d28301161005b578063997d2830146100d2578063beac91fc146100e9578063ce99b5df146100fc578063f2fde38b1461010f57600080fd5b80635e6fef0114610082578063715018a6146100ad5780638da5cb5b146100b7575b600080fd5b61009561009036600461049d565b610122565b6040516100a4939291906104fc565b60405180910390f35b6100b56101d5565b005b6000546040516001600160a01b0390911681526020016100a4565b6100db60025481565b6040519081526020016100a4565b6100db6100f736600461055f565b6101e9565b61009561010a36600461049d565b610319565b6100b561011d366004610621565b6103e2565b60016020819052600091825260409091208054918101805461014390610643565b80601f016020809104026020016040519081016040528092919081815260200182805461016f90610643565b80156101bc5780601f10610191576101008083540402835291602001916101bc565b820191906000526020600020905b81548152906001019060200180831161019f57829003601f168201915b505050600290930154919250506001600160a01b031683565b6101dd610420565b6101e7600061044d565b565b60006101f3610420565b6001600160a01b03821661024e5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420766f74696e6720636f6e747261637400000000000000000060448201526064015b60405180910390fd5b600280546000918261025f8361067d565b909155506040805160608101825282815260208082018881526001600160a01b038816838501526000858152600192839052939093208251815592519394509092908201906102ae90826106f3565b5060409182015160029190910180546001600160a01b0319166001600160a01b039092169190911790555181907fc567e07cebb66de8c1cbc2ac74b38efbcd38ee2d242b281e8b041cdef4db6b259061030a90879087906107b3565b60405180910390a29392505050565b6000818152600160208190526040822080546002820154928201805460609486949392916001600160a01b0390911690829061035490610643565b80601f016020809104026020016040519081016040528092919081815260200182805461038090610643565b80156103cd5780601f106103a2576101008083540402835291602001916103cd565b820191906000526020600020905b8154815290600101906020018083116103b057829003601f168201915b50505050509150935093509350509193909250565b6103ea610420565b6001600160a01b03811661041457604051631e4fbdf760e01b815260006004820152602401610245565b61041d8161044d565b50565b6000546001600160a01b031633146101e75760405163118cdaa760e01b8152336004820152602401610245565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104af57600080fd5b5035919050565b6000815180845260005b818110156104dc576020818501810151868301820152016104c0565b506000602082860101526020601f19601f83011685010191505092915050565b83815260606020820152600061051560608301856104b6565b905060018060a01b0383166040830152949350505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461055a57600080fd5b919050565b6000806040838503121561057257600080fd5b823567ffffffffffffffff8082111561058a57600080fd5b818501915085601f83011261059e57600080fd5b8135818111156105b0576105b061052d565b604051601f8201601f19908116603f011681019083821181831017156105d8576105d861052d565b816040528281528860208487010111156105f157600080fd5b82602086016020830137600060208483010152809650505050505061061860208401610543565b90509250929050565b60006020828403121561063357600080fd5b61063c82610543565b9392505050565b600181811c9082168061065757607f821691505b60208210810361067757634e487b7160e01b600052602260045260246000fd5b50919050565b60006001820161069d57634e487b7160e01b600052601160045260246000fd5b5060010190565b601f8211156106ee57600081815260208120601f850160051c810160208610156106cb5750805b601f850160051c820191505b818110156106ea578281556001016106d7565b5050505b505050565b815167ffffffffffffffff81111561070d5761070d61052d565b6107218161071b8454610643565b846106a4565b602080601f831160018114610756576000841561073e5750858301515b600019600386901b1c1916600185901b1785556106ea565b600085815260208120601f198616915b8281101561078557888601518255948401946001909101908401610766565b50858210156107a35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006107c660408301856104b6565b905060018060a01b0383166020830152939250505056fea2646970667358221220dfc14f8f6f735f6d00e180e43599268f5fab9f13bf606f25c692742969cdb10c64736f6c63430008140033";

type ElectionManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ElectionManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ElectionManager__factory extends ContractFactory {
  constructor(...args: ElectionManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ElectionManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ElectionManager__factory {
    return super.connect(runner) as ElectionManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ElectionManagerInterface {
    return new Interface(_abi) as ElectionManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ElectionManager {
    return new Contract(address, _abi, runner) as unknown as ElectionManager;
  }
}
