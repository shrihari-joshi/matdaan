/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SimpleZKPVerifier,
  SimpleZKPVerifierInterface,
} from "../../../contracts/simpleZKP.sol/SimpleZKPVerifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "electionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    name: "MerkleRootSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "electionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "voterHash",
        type: "bytes32",
      },
    ],
    name: "VoterAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_electionId",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "_voterHashes",
        type: "bytes32[]",
      },
    ],
    name: "addValidVoters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "electionVoterMerkleRoots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_voterHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_electionId",
        type: "uint256",
      },
    ],
    name: "generateNullifier",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_electionId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "setVoterMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "validVoters",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_secret",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "verifyVoteCommitment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_electionId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_voterHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "verifyVoter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106bd806100a56000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638f828728116100665780638f8287281461018c578063a2b691b8146101bb578063b3da5220146101ce578063f2fde38b146101fc578063f9aaf7da1461020f57600080fd5b80632dbc9f69146100a3578063715018a6146100fb57806380aede6914610105578063813ce701146101185780638da5cb5b14610171575b600080fd5b6100e86100b1366004610428565b6040805160208082019590955280820193909352606080840192909252805180840390920182526080909201909152805191012090565b6040519081526020015b60405180910390f35b61010361022f565b005b610103610113366004610454565b610243565b6101616101263660046104d3565b604080516020808201969096528082019490945260608085019390935280518085039093018352608090930190925280519201919091201490565b60405190151581526020016100f2565b6000546040516001600160a01b0390911681526020016100f2565b61016161019a36600461051b565b50600091825260026020908152604080842092845291905290205460ff1690565b6101036101c93660046105df565b61030f565b6101616101dc3660046105df565b600260209081526000928352604080842090915290825290205460ff1681565b61010361020a366004610601565b610368565b6100e861021d366004610631565b60016020526000908152604090205481565b6102376103ab565b61024160006103d8565b565b61024b6103ab565b60005b818110156103095760008481526002602052604081206001918585858181106102795761027961064a565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550837fc8f957171c6b71a32d16bbfcc5bb185498306de8d453e61dff4eac9a973e10fb8484848181106102d9576102d961064a565b905060200201356040516102ef91815260200190565b60405180910390a28061030181610660565b91505061024e565b50505050565b6103176103ab565b600082815260016020526040908190208290555182907fb04b7d6145a7588fdcf339a22877d5965f861c171204fc37688058c5f6c06d3b9061035c9084815260200190565b60405180910390a25050565b6103706103ab565b6001600160a01b03811661039f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6103a8816103d8565b50565b6000546001600160a01b031633146102415760405163118cdaa760e01b8152336004820152602401610396565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060006060848603121561043d57600080fd5b505081359360208301359350604090920135919050565b60008060006040848603121561046957600080fd5b83359250602084013567ffffffffffffffff8082111561048857600080fd5b818601915086601f83011261049c57600080fd5b8135818111156104ab57600080fd5b8760208260051b85010111156104c057600080fd5b6020830194508093505050509250925092565b600080600080608085870312156104e957600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561053057600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561055657600080fd5b818601915086601f83011261056a57600080fd5b81358181111561057c5761057c610505565b604051601f8201601f19908116603f011681019083821181831017156105a4576105a4610505565b816040528281528960208487010111156105bd57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156105f257600080fd5b50508035926020909101359150565b60006020828403121561061357600080fd5b81356001600160a01b038116811461062a57600080fd5b9392505050565b60006020828403121561064357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161068057634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212206989d3614d841de052cade0137e6bca07120b21dc49f49f7605d3f2a6faaddae64736f6c63430008140033";

type SimpleZKPVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleZKPVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleZKPVerifier__factory extends ContractFactory {
  constructor(...args: SimpleZKPVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleZKPVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleZKPVerifier__factory {
    return super.connect(runner) as SimpleZKPVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleZKPVerifierInterface {
    return new Interface(_abi) as SimpleZKPVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleZKPVerifier {
    return new Contract(address, _abi, runner) as unknown as SimpleZKPVerifier;
  }
}
